{"version":3,"sources":["components/DisplayWeather.js","components/Navbar.js","App.js","index.js"],"names":["DisplayWeather","props","weatherData","temperature","description","location","region","country","wind_speed","pressure","precip","humidity","img","className","src","alt","Navbar","onSubmit","e","changeWeather","action","placeholder","onChange","changeRegion","target","value","App","state","coords","latitude","longitude","data","inputData","change","city","setState","event","preventDefault","axios","get","then","res","console","log","name","current","weather_descriptions","weather_icons","navigator","geolocation","getCurrentPosition","position","newCoords","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPA8CeA,EA5CQ,SAACC,GAAU,MAG+EA,EAAMC,YAA3GC,EAHsB,EAGtBA,YAAaC,EAHS,EAGTA,YAAaC,EAHJ,EAGIA,SAAUC,EAHd,EAGcA,OAAQC,EAHtB,EAGsBA,QAASC,EAH/B,EAG+BA,WAAYC,EAH3C,EAG2CA,SAAUC,EAHrD,EAGqDA,OAAQC,EAH7D,EAG6DA,SAAUC,EAHvE,EAGuEA,IACrG,OACI,sBAAKC,UAAU,eAAf,UACA,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,wBAAf,UACI,+BAAKV,EAAY,oCAAjB,OAAkCC,KAClC,6BAAKC,IACL,8BAAIC,EAAJ,MAAeC,QAGnB,qBAAKM,UAAU,WAAf,SACI,qBAAKA,UAAU,UAAUC,IAAKF,EAAKG,IAAI,qBAI/C,sBAAKF,UAAU,MAAf,UACI,sBAAKA,UAAU,wBAAf,UACI,8BAAG,2CAAH,aACA,6BAAKL,OAGT,sBAAKK,UAAU,wBAAf,UACI,8BAAG,0CAAH,gBACA,6BAAKJ,OAGT,sBAAKI,UAAU,wBAAf,UACI,8BAAG,8CAAH,UACA,6BAAKH,OAGT,sBAAKG,UAAU,wBAAf,UACI,8BAAG,yCAAH,SACA,6BAAKF,cCrBNK,EAfA,SAACf,GACZ,OACI,sBAAKY,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,qBAAKA,UAAU,QAAf,2BAEJ,qBAAKA,UAAU,WAAWI,SAAU,SAACC,GAAD,OAAOjB,EAAMkB,cAAcD,IAA/D,SACI,sBAAME,OAAO,GAAGP,UAAU,SAA1B,SACI,uBAAOA,UAAU,cAAcQ,YAAY,iBAAiBC,SAAU,SAACJ,GAAD,OAAOjB,EAAMsB,aAAaL,EAAEM,OAAOC,kBCmG9GC,E,4MAnGbC,MAAQ,CACNC,OAAQ,CACNC,SAAU,GACVC,UAAW,IAEbC,KAAM,GACNC,UAAU,I,EA8CZC,OAAS,SAACC,GAER,EAAKC,SAAS,CAACH,UAAWE,K,EAI5Bf,cAAgB,SAACiB,GACfA,EAAMC,iBAGNC,IAAMC,IAAN,gGAAmG,EAAKZ,MAAMK,YAAaQ,MAAK,SAAAC,GAC9HC,QAAQC,IAAIF,GAEZ,IAAIvC,EAAc,CACZG,SAAUoC,EAAIV,KAAK1B,SAASuC,KAC5BzC,YAAasC,EAAIV,KAAKc,QAAQ1C,YAC9BC,YAAaqC,EAAIV,KAAKc,QAAQC,qBAAqB,GACnDxC,OAAQmC,EAAIV,KAAK1B,SAASC,OAC1BC,QAASkC,EAAIV,KAAK1B,SAASE,QAC3BC,WAAYiC,EAAIV,KAAKc,QAAQrC,WAC7BC,SAAUgC,EAAIV,KAAKc,QAAQpC,SAC3BC,OAAQ+B,EAAIV,KAAKc,QAAQnC,OACzBC,SAAU8B,EAAIV,KAAKc,QAAQlC,SAC3BC,IAAK6B,EAAIV,KAAKc,QAAQE,eAGxB,EAAKZ,SAAS,CAAEJ,KAAM7B,Q,uDArE9B,WAAqB,IAAD,OAGd8C,UAAUC,YAIZD,UAAUC,YAAYC,oBAAmB,SAACC,GAGxC,IAAIC,EAAY,CACdvB,SAAUsB,EAASvB,OAAOC,SAC1BC,UAAWqB,EAASvB,OAAOE,WAI7B,EAAKK,SAAS,CAAEP,OAAQwB,IAGxBd,IAAMC,IAAN,gGAAmG,EAAKZ,MAAMC,OAAOC,SAArH,YAAiI,EAAKF,MAAMC,OAAOE,YAAaU,MAAK,SAAAC,GAEnK,IAAIvC,EAAc,CAChBG,SAAUoC,EAAIV,KAAK1B,SAASuC,KAC5BzC,YAAasC,EAAIV,KAAKc,QAAQ1C,YAC9BC,YAAaqC,EAAIV,KAAKc,QAAQC,qBAAqB,GACnDxC,OAAQmC,EAAIV,KAAK1B,SAASC,OAC1BC,QAASkC,EAAIV,KAAK1B,SAASE,QAC3BC,WAAYiC,EAAIV,KAAKc,QAAQrC,WAC7BC,SAAUgC,EAAIV,KAAKc,QAAQpC,SAC3BC,OAAQ+B,EAAIV,KAAKc,QAAQnC,OACzBC,SAAU8B,EAAIV,KAAKc,QAAQlC,SAC3BC,IAAK6B,EAAIV,KAAKc,QAAQE,eAGxB,EAAKZ,SAAS,CAAEJ,KAAM7B,UAI1BwC,QAAQC,IAAI,mB,oBAmChB,WACI,OAEE,qBAAK9B,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,CAAQM,cAAekC,KAAKlC,cAAeI,aAAc8B,KAAKpB,SAChE,cAAC,EAAD,CAAgB/B,YAAamD,KAAK1B,MAAMI,gB,GA1FhCuB,IAAMC,W,MCFxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.10607db1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst DisplayWeather = (props) => {\r\n    // console.log(props.weatherData);\r\n\r\n    const { temperature, description, location, region, country, wind_speed, pressure, precip, humidity, img } = props.weatherData;\r\n    return (\r\n        <div className=\"user-weather\">\r\n        <div className=\"row\">\r\n            <div className=\"col-md-3 weather-temp\">\r\n                <h1>{temperature}<sup>o</sup>C , {description}</h1>\r\n                <h4>{location}</h4>\r\n                <p>{region} , {country}</p>\r\n            </div>\r\n\r\n            <div className=\"col-md-9\">\r\n                <img className=\"mainImg\" src={img} alt=\"weather-img\" />\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n            <div className=\"col-md-3 weather-info\">\r\n                <p><b>Wind Speed</b>(km/hr)</p>\r\n                <h2>{wind_speed}</h2>\r\n            </div>\r\n\r\n            <div className=\"col-md-3 weather-info\">\r\n                <p><b>Preassure</b>(millibar)</p>\r\n                <h2>{pressure}</h2>\r\n            </div>\r\n\r\n            <div className=\"col-md-3 weather-info\">\r\n                <p><b>Precipitation</b>(mm)</p>\r\n                <h2>{precip}</h2>\r\n            </div>\r\n\r\n            <div className=\"col-md-3 weather-info\">\r\n                <p><b>Humidity</b>(%)</p>\r\n                <h2>{humidity}</h2>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default DisplayWeather","import React from 'react';\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md 6\">\r\n                <div className=\"title\">Weather-app</div>\r\n            </div>\r\n            <div className=\"col-md 6\" onSubmit={(e) => props.changeWeather(e)}>\r\n                <form action=\"\" className=\"region\">\r\n                    <input className=\"regioninput\" placeholder=\"Enter Location\" onChange={(e) => props.changeRegion(e.target.value)} /> \r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport DisplayWeather from './components/DisplayWeather';\nimport Navbar from './components/Navbar.js';\n\n\n\nclass App extends React.Component  {\n  // Default state of long and lat but to be changed to current\n  state = {\n    coords: {\n      latitude: 45,\n      longitude: 60\n    },\n    data: {},\n    inputData:''\n  }\n\n  componentDidMount() {\n    // Get device location -\n    // How do we get device location? We use html 5 api which has a navigator object to get the device location. First we check if the geolocation is supported in the system.  \n    if (navigator.geolocation) {\n\n      //console.log('Supported')\n      //We call a method to get our current device location position. This method getCurrentPosition requires passing a function to run. And this function requires a argument (call it what ever you want). But it will basically give you the position object. \n      navigator.geolocation.getCurrentPosition((position) => {\n        // console.log(position.coords.latitude)\n        // Set current coords into a variable called newCoords\n        let newCoords = { \n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        }\n\n        // Set default state equal to newCoords on component mount.\n        this.setState({ coords: newCoords });\n\n        // Api call\n        axios.get(`http://api.weatherstack.com/current?access_key=823d378bc0e421a61a1daa5a563e3104&query=${this.state.coords.latitude},${this.state.coords.longitude}`).then(res => {\n          // console.log(res);\n          let weatherData = {\n            location: res.data.location.name,\n            temperature: res.data.current.temperature,\n            description: res.data.current.weather_descriptions[0], \n            region: res.data.location.region,\n            country: res.data.location.country,\n            wind_speed: res.data.current.wind_speed,\n            pressure: res.data.current.pressure,\n            precip: res.data.current.precip,\n            humidity: res.data.current.humidity,\n            img: res.data.current.weather_icons\n          }\n          // Here we put our weather data into our state\n          this.setState({ data: weatherData });\n        })\n      });\n    } else {\n      console.log('not supported')\n    }\n  }\n\n  // Track the input field - (e.target.value is passed in as argument in onChange in Navbar component and city represents the argument as we console log the cit. We get the input value)\n  change = (city) => {\n    // console.log(city)\n    this.setState({inputData: city})\n  }\n\n  // Change City weather\n  changeWeather = (event) => {\n    event.preventDefault();\n\n    // api call \n    axios.get(`http://api.weatherstack.com/current?access_key=823d378bc0e421a61a1daa5a563e3104&query=${this.state.inputData}`).then(res => {\n      console.log(res);\n\n      let weatherData = {\n            location: res.data.location.name,\n            temperature: res.data.current.temperature,\n            description: res.data.current.weather_descriptions[0], \n            region: res.data.location.region,\n            country: res.data.location.country,\n            wind_speed: res.data.current.wind_speed,\n            pressure: res.data.current.pressure,\n            precip: res.data.current.precip,\n            humidity: res.data.current.humidity,\n            img: res.data.current.weather_icons\n          }\n          // Here we put our new weather data into our state\n          this.setState({ data: weatherData });\n    })\n  }\n\n  render() {\n      return (\n      \n        <div className=\"App\">\n          <div className=\"container\">\n            <Navbar changeWeather={this.changeWeather} changeRegion={this.change}/>\n          <DisplayWeather weatherData={this.state.data}/>\n          </div>\n          \n          \n      </div>\n      \n    );\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}